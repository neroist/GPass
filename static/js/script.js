/* Generated by the Nim Compiler v1.6.6 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554437 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI469762255 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI671098569 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI671099048 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554435 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI469762146 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554438 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI469762066 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI469762066.base = NTI33554438;
NTI469762146.base = NTI33554435;
var NNI671099048 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI671098569, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI671099048.node = NNI671099048;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI469762255 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554437, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554437, name: "b", sons: null}]};
NTI469762255.node = NNI469762255;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function cstrToNimstr(c_33556805) {
      var ln = c_33556805.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556805.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556805.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function eqStrings(a_33556932, b_33556933) {
        if (a_33556932 == b_33556933) return true;
    if (a_33556932 === null && b_33556933.length == 0) return true;
    if (b_33556933 === null && a_33556932.length == 0) return true;
    if ((!a_33556932) || (!b_33556933)) return false;
    var alen = a_33556932.length;
    if (alen != b_33556933.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556932[i] != b_33556933[i]) return false;
    return true;
  

  
}

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}


function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet1[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function find_469762103(a_469762106, item_469762107) {
  var result_469762108 = 0;

  BeforeRet: do {
    result_469762108 = 0;
    Label1: do {
      var i_469762112 = 0;
      var i_469762275 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762275 < (a_469762106).length)) break Label3;
            i_469762112 = a_469762106[i_469762275];
            if ((i_469762112 == item_469762107)) {
            break BeforeRet;
            }
            
            result_469762108 += 1;
            i_469762275 += 1;
          }
      } while (false);
    } while (false);
    result_469762108 = -1;
  } while (false);

  return result_469762108;

}

function contains_469762098(a_469762100, item_469762101) {
  var result_469762102 = false;

  BeforeRet: do {
    result_469762102 = (0 <= find_469762103(a_469762100, item_469762101));
    break BeforeRet;
  } while (false);

  return result_469762102;

}

function deduplicate_469762057(s_469762059, isSorted_469762060) {
  var result_469762061 = [];

    result_469762061 = nimCopy(null, [], NTI469762066);
    if ((0 < (s_469762059).length)) {
    if (isSorted_469762060) {
    var prev_469762069 = s_469762059[0];
    result_469762061.push(prev_469762069);;
    Label1: do {
      var i_469762081 = 0;
      var colontmp__469762267 = 0;
      colontmp__469762267 = (s_469762059).length - 1;
      var res_469762268 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762268 <= colontmp__469762267)) break Label3;
            i_469762081 = res_469762268;
            if (!((s_469762059[i_469762081] == prev_469762069))) {
            prev_469762069 = s_469762059[i_469762081];
            result_469762061.push(prev_469762069);;
            }
            
            res_469762268 += 1;
          }
      } while (false);
    } while (false);
    }
    else {
      Label4: do {
        var itm_469762097 = 0;
        var i_469762272 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_469762272 < (s_469762059).length)) break Label6;
              itm_469762097 = s_469762059[i_469762272];
              if (!(contains_469762098(result_469762061, itm_469762097))) {
              result_469762061.push(itm_469762097);;
              }
              
              i_469762272 += 1;
            }
        } while (false);
      } while (false);
    }
    
    }
    

  return result_469762061;

}

function newSeq_469762184(len_469762186) {
  var result_469762187 = [];

    result_469762187 = new Array(len_469762186); for (var i = 0 ; i < len_469762186 ; ++i) { result_469762187[i] = 0.0; }
  return result_469762187;

}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557576(x_33557577, y_33557578) {
  var result_33557579 = 0.0;

    result_33557579 = (toFloat_33556001(x_33557577) / toFloat_33556001(y_33557578));

  return result_33557579;

}

function count_469762171(s_469762173, x_469762174) {
  var result_469762175 = 0;

    Label1: do {
      var itm_469762179 = 0;
      var i_469762278 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762278 < (s_469762173).length)) break Label3;
            itm_469762179 = s_469762173[i_469762278];
            if ((itm_469762179 == x_469762174)) {
            result_469762175 += 1;
            }
            
            i_469762278 += 1;
          }
      } while (false);
    } while (false);

  return result_469762175;

}

function HEX2BHEX3D_704645106(x_704645108, x_704645108_Idx, y_704645109) {
    x_704645108[x_704645108_Idx] = (x_704645108[x_704645108_Idx] + y_704645109);

  
}

function shannon(list_469762055) {
  var result_469762056 = [0.0];

    var elems_469762139 = deduplicate_469762057(list_469762055, false);
    var collectResult_469762145 = newSeq_469762184(0);
    Label1: do {
      var elem_469762204 = 0;
      var i_469762258 = 0;
      var L_469762259 = (elems_469762139).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762258 < L_469762259)) break Label3;
            elem_469762204 = elems_469762139[i_469762258];
            collectResult_469762145.push(HEX2F_33557576(count_469762171(list_469762055, elem_469762204), (list_469762055).length));;
            i_469762258 += 1;
          }
      } while (false);
    } while (false);
    var frequences_469762213 = nimCopy(null, collectResult_469762145, NTI469762146);
    Label4: do {
      var frequency_469762233 = 0.0;
      var i_469762263 = 0;
      var L_469762264 = (frequences_469762213).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_469762263 < L_469762264)) break Label6;
            frequency_469762233 = frequences_469762213[i_469762263];
            HEX2BHEX3D_704645106(result_469762056, 0, (frequency_469762233 * Math.log2(frequency_469762233)));
            i_469762263 += 1;
          }
      } while (false);
    } while (false);
    result_469762056[0] = -(result_469762056[0]);

  return result_469762056[0];

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function nimFloatToString_335544446(a_335544447) {
  var result_335544448 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_335544447))
      result_335544448 = a_335544447 === 0 && 1 / a_335544447 < 0 ? "-0.0" : a_335544447+".0"
    else {
      result_335544448 = a_335544447+""
      if(nimOnlyDigitsOrMinus(result_335544448)){
        result_335544448 = a_335544447+".0"
      }
    }
  

  return result_335544448;

}

function addFloat_33557373(result_33557375, result_33557375_Idx, x_33557376) {
    add_33556420(result_33557375, result_33557375_Idx, nimFloatToString_335544446(x_33557376));

  
}

function HEX24_33557369(x_33557371) {
  var result_33557372 = [[]];

    addFloat_33557373(result_33557372, 0, x_33557371);

  return result_33557372[0];

}

function parseSaturatedNatural_654311740(s_654311741, b_654311742, b_654311742_Idx, start_654311743) {
      var Temporary1;
          var Temporary4;

  var result_654311744 = 0;

    var i_654311745 = start_654311743;
    if (((i_654311745 < (s_654311741).length) && (s_654311741[i_654311745] == 43))) {
    i_654311745 += 1;
    }
    
      if (!(i_654311745 < (s_654311741).length)) Temporary1 = false; else {        Temporary1 = (ConstSet6[s_654311741[i_654311745]] != undefined);      }    if (Temporary1) {
    b_654311742[b_654311742_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_654311745 < (s_654311741).length)) Temporary4 = false; else {            Temporary4 = (ConstSet7[s_654311741[i_654311745]] != undefined);          }        if (!Temporary4) break Label3;
          var c_654311764 = (s_654311741[i_654311745] - 48);
          if ((b_654311742[b_654311742_Idx] <= Math.trunc((2147483647 - c_654311764) / 10))) {
          b_654311742[b_654311742_Idx] = ((b_654311742[b_654311742_Idx] * 10) + c_654311764);
          }
          else {
            b_654311742[b_654311742_Idx] = 2147483647;
          }
          
          i_654311745 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_654311745 < (s_654311741).length) && (s_654311741[i_654311745] == 95))) break Label6;
                i_654311745 += 1;
              }
          } while (false);
        }
    } while (false);
    result_654311744 = (i_654311745 - start_654311743);
    }
    

  return result_654311744;

}

function HEX5BHEX5D_671091881(s_671091884, x_671091885) {
  var result_671091886 = [];

    var a_671091888 = x_671091885.a;
    var L_671091890 = ((((s_671091884).length - x_671091885.b) - a_671091888) + 1);
    result_671091886 = nimCopy(null, mnewString(L_671091890), NTI33554439);
    Label1: do {
      var i_671091895 = 0;
      var i_469762474 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762474 < L_671091890)) break Label3;
            i_671091895 = i_469762474;
            result_671091886[i_671091895] = s_671091884[(i_671091895 + a_671091888)];
            i_469762474 += 1;
          }
      } while (false);
    } while (false);

  return result_671091886;

}

function HEX2EHEX2E_671091854(a_671091857, b_671091858) {
  var result_671091861 = ({a: 0, b: 0});

    result_671091861 = nimCopy(result_671091861, {a: a_671091857, b: b_671091858}, NTI671099048);

  return result_671091861;

}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function parseStandardFormatSpecifier_620757048(s_620757049, start_620757050, ignoreUnknownSuffix_620757051) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_620757052 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_620757052.fill = 32;
    result_620757052.align = 0;
    result_620757052.sign = 45;
    var i_620757054 = start_620757050;
    if ((((i_620757054 + 1) < (s_620757049).length) && (ConstSet2[s_620757049[(i_620757054 + 1)]] != undefined))) {
    result_620757052.fill = s_620757049[i_620757054];
    result_620757052.align = s_620757049[(i_620757054 + 1)];
    i_620757054 += 2;
    }
    else {
    if (((i_620757054 < (s_620757049).length) && (ConstSet3[s_620757049[i_620757054]] != undefined))) {
    result_620757052.align = s_620757049[i_620757054];
    i_620757054 += 1;
    }
    }
    if (((i_620757054 < (s_620757049).length) && (ConstSet4[s_620757049[i_620757054]] != undefined))) {
    result_620757052.sign = s_620757049[i_620757054];
    i_620757054 += 1;
    }
    
    if (((i_620757054 < (s_620757049).length) && (s_620757049[i_620757054] == 35))) {
    result_620757052.alternateForm = true;
    i_620757054 += 1;
    }
    
      if (!(((i_620757054 + 1) < (s_620757049).length) && (s_620757049[i_620757054] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet5[s_620757049[(i_620757054 + 1)]] != undefined);      }    if (Temporary1) {
    result_620757052.padWithZero = true;
    i_620757054 += 1;
    }
    
    var parsedLength_620757091 = parseSaturatedNatural_654311740(s_620757049, result_620757052, "minimumWidth", i_620757054);
    i_620757054 += parsedLength_620757091;
    if (((i_620757054 < (s_620757049).length) && (s_620757049[i_620757054] == 46))) {
    i_620757054 += 1;
    var parsedLengthB_620757100 = parseSaturatedNatural_654311740(s_620757049, result_620757052, "precision", i_620757054);
    i_620757054 += parsedLengthB_620757100;
    }
    else {
      result_620757052.precision = -1;
    }
    
      if (!(i_620757054 < (s_620757049).length)) Temporary2 = false; else {        Temporary2 = (ConstSet8[s_620757049[i_620757054]] != undefined);      }    if (Temporary2) {
    result_620757052.typ = s_620757049[i_620757054];
    i_620757054 += 1;
    }
    
    result_620757052.endPosition = i_620757054;
      if (!!((i_620757054 == (s_620757049).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_620757051);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_671091881(s_620757049, HEX2EHEX2E_671091854(i_620757054, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_620757052;

}

function nsuformatBiggestFloat(f_704644923, format_704644924, precision_704644925, decimalSep_704644926) {
  var result_704644927 = [];

    var precision_704644928 = precision_704644925;
    if ((precision_704644928 == -1)) {
    precision_704644928 = 6;
    }
    
    var res_704644929 = null;
    switch (format_704644924) {
    case 0:
      res_704644929 = f_704644923.toString();
      break;
    case 1:
      res_704644929 = f_704644923.toFixed(precision_704644928);
      break;
    case 2:
      res_704644929 = f_704644923.toExponential(precision_704644928);
      break;
    }
    result_704644927 = nimCopy(null, cstrToNimstr(res_704644929), NTI33554439);
    if (((1.0 / f_704644923) == -Infinity)) {
    result_704644927 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_704644929) || []), NTI33554439);
    }
    
    Label1: do {
      var i_704644934 = 0;
      var colontmp__469762479 = 0;
      colontmp__469762479 = (result_704644927).length;
      var i_469762480 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762480 < colontmp__469762479)) break Label3;
            i_704644934 = i_469762480;
            if ((ConstSet9[result_704644927[i_704644934]] != undefined)) {
            result_704644927[i_704644934] = decimalSep_704644926;
            }
            
            i_469762480 += 1;
          }
      } while (false);
    } while (false);

  return result_704644927;

}

function insert_33557847(x_33557848, x_33557848_Idx, item_33557849, i_33557850) {
    var xl_33557851 = (x_33557848[x_33557848_Idx]).length;
    (x_33557848[x_33557848_Idx].length = (xl_33557851 + (item_33557849).length));
    var j_33557852 = (xl_33557851 - 1);
    Label1: do {
        Label2: while (true) {
        if (!(i_33557850 <= j_33557852)) break Label2;
          x_33557848[x_33557848_Idx][(j_33557852 + (item_33557849).length)] = x_33557848[x_33557848_Idx][j_33557852];
          j_33557852 -= 1;
        }
    } while (false);
    j_33557852 = 0;
    Label3: do {
        Label4: while (true) {
        if (!(j_33557852 < (item_33557849).length)) break Label4;
          x_33557848[x_33557848_Idx][(j_33557852 + i_33557850)] = item_33557849[j_33557852];
          j_33557852 += 1;
        }
    } while (false);

  
}

function nsuRepeatChar(c_704644085, count_704644086) {
  var result_704644087 = [];

    result_704644087 = nimCopy(null, mnewString(count_704644086), NTI33554439);
    Label1: do {
      var i_704644092 = 0;
      var colontmp__469762485 = 0;
      colontmp__469762485 = (count_704644086 - 1);
      var res_469762486 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762486 <= colontmp__469762485)) break Label3;
            i_704644092 = res_469762486;
            result_704644087[i_704644092] = c_704644085;
            res_469762486 += 1;
          }
      } while (false);
    } while (false);

  return result_704644087;

}

function validateUtf8_671088917(s_671088918) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_671088919 = 0;

  BeforeRet: do {
    var i_671088920 = 0;
    var L_671088921 = (s_671088918).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_671088920 < L_671088921)) break Label2;
          if ((s_671088918[i_671088920] <= 127)) {
          i_671088920 += 1;
          }
          else {
          if (((s_671088918[i_671088920] >>> 5) == 6)) {
          if ((s_671088918[i_671088920] < 194)) {
          result_671088919 = i_671088920;
          break BeforeRet;
          }
          
            if (!((i_671088920 + 1) < L_671088921)) Temporary3 = false; else {              Temporary3 = ((s_671088918[(i_671088920 + 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_671088920 += 2;
          }
          else {
            result_671088919 = i_671088920;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_671088918[i_671088920] >>> 4) == 14)) {
            if (!((i_671088920 + 2) < L_671088921)) Temporary5 = false; else {              Temporary5 = ((s_671088918[(i_671088920 + 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_671088918[(i_671088920 + 2)] >>> 6) == 2);            }          if (Temporary4) {
          i_671088920 += 3;
          }
          else {
            result_671088919 = i_671088920;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_671088918[i_671088920] >>> 3) == 30)) {
            if (!((i_671088920 + 3) < L_671088921)) Temporary8 = false; else {              Temporary8 = ((s_671088918[(i_671088920 + 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_671088918[(i_671088920 + 2)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_671088918[(i_671088920 + 3)] >>> 6) == 2);            }          if (Temporary6) {
          i_671088920 += 4;
          }
          else {
            result_671088919 = i_671088920;
            break BeforeRet;
          }
          
          }
          else {
            result_671088919 = i_671088920;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_671088919 = -1;
    break BeforeRet;
  } while (false);

  return result_671088919;

}

function nucruneLen(s_671088650) {
  var result_671088651 = 0;

    result_671088651 = 0;
    var i_671088652 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_671088652 < (s_671088650).length)) break Label2;
          if ((s_671088650[i_671088652] <= 127)) {
          i_671088652 += 1;
          }
          else {
          if (((s_671088650[i_671088652] >>> 5) == 6)) {
          i_671088652 += 2;
          }
          else {
          if (((s_671088650[i_671088652] >>> 4) == 14)) {
          i_671088652 += 3;
          }
          else {
          if (((s_671088650[i_671088652] >>> 3) == 30)) {
          i_671088652 += 4;
          }
          else {
          if (((s_671088650[i_671088652] >>> 2) == 62)) {
          i_671088652 += 5;
          }
          else {
          if (((s_671088650[i_671088652] >>> 1) == 126)) {
          i_671088652 += 6;
          }
          else {
          i_671088652 += 1;
          }
          }}}}}
          result_671088651 += 1;
        }
    } while (false);

  return result_671088651;

}

function alignString_620757010(s_620757011, minimumWidth_620757012, align_620757013, fill_620757014) {
      var Temporary1;

  var result_620757015 = [];

    if ((minimumWidth_620757012 == 0)) {
    result_620757015 = nimCopy(null, s_620757011, NTI33554439);
    }
    else {
      if ((validateUtf8_671088917(s_620757011) == -1)) {
      Temporary1 = nucruneLen(s_620757011);
      }
      else {
      Temporary1 = (s_620757011).length;
      }
      
      var sRuneLen_620757016 = Temporary1;
      var toFill_620757017 = (minimumWidth_620757012 - sRuneLen_620757016);
      if ((toFill_620757017 <= 0)) {
      result_620757015 = nimCopy(null, s_620757011, NTI33554439);
      }
      else {
      if (((align_620757013 == 60) || (align_620757013 == 0))) {
      result_620757015 = nimCopy(null, (s_620757011 || []).concat(nsuRepeatChar(fill_620757014, toFill_620757017) || []), NTI33554439);
      }
      else {
      if ((align_620757013 == 94)) {
      var half_620757018 = Math.trunc(toFill_620757017 / 2);
      result_620757015 = nimCopy(null, (nsuRepeatChar(fill_620757014, half_620757018) || []).concat(s_620757011 || [],nsuRepeatChar(fill_620757014, (toFill_620757017 - half_620757018)) || []), NTI33554439);
      }
      else {
        result_620757015 = nimCopy(null, (nsuRepeatChar(fill_620757014, toFill_620757017) || []).concat(s_620757011 || []), NTI33554439);
      }
      }}
    }
    

  return result_620757015;

}

function nsuToUpperAsciiChar(c_704643159) {
  var result_704643160 = 0;

    if ((ConstSet11[c_704643159] != undefined)) {
    result_704643160 = (c_704643159 ^ 32);
    }
    else {
      result_704643160 = c_704643159;
    }
    

  return result_704643160;

}

function nsuToUpperAsciiStr(s_704643166) {
  var result_704643167 = [];

    result_704643167 = nimCopy(null, mnewString((s_704643166).length), NTI33554439);
    Label1: do {
      var iHEX60gensym11_704643173 = 0;
      var colontmp__469762491 = 0;
      colontmp__469762491 = ((s_704643166).length - 1);
      var res_469762492 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762492 <= colontmp__469762491)) break Label3;
            iHEX60gensym11_704643173 = res_469762492;
            result_704643167[iHEX60gensym11_704643173] = nsuToUpperAsciiChar(s_704643166[iHEX60gensym11_704643173]);
            res_469762492 += 1;
          }
      } while (false);
    } while (false);

  return result_704643167;

}

function formatValue_469762307(result_469762309, result_469762309_Idx, value_469762310, specifier_469762311) {
    var Temporary1;

  BeforeRet: do {
    if (((specifier_469762311).length == 0)) {
    result_469762309[result_469762309_Idx].push.apply(result_469762309[result_469762309_Idx], HEX24_33557369(value_469762310));;
    break BeforeRet;
    }
    
    var spec_469762315 = parseStandardFormatSpecifier_620757048(specifier_469762311, 0, false);
    var fmode_469762316 = 0;
    switch (spec_469762315.typ) {
    case 101:
    case 69:
      fmode_469762316 = 2;
      break;
    case 102:
    case 70:
      fmode_469762316 = 1;
      break;
    case 103:
    case 71:
      fmode_469762316 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_469762315.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_469762318 = [nsuformatBiggestFloat(value_469762310, fmode_469762316, spec_469762315.precision, 46)];
    var sign_469762319 = false;
    if ((0.0 <= value_469762310)) {
    if (!((spec_469762315.sign == 45))) {
    sign_469762319 = true;
    if ((value_469762310 == 0.0)) {
    if (((1.0 / value_469762310) == Infinity)) {
    insert_33557847(f_469762318, 0, nimCharToStr(spec_469762315.sign), 0);
    }
    
    }
    else {
    insert_33557847(f_469762318, 0, nimCharToStr(spec_469762315.sign), 0);
    }
    
    }
    
    }
    else {
      sign_469762319 = true;
    }
    
    if (spec_469762315.padWithZero) {
    var signStr_469762320 = [];
    if (sign_469762319) {
    signStr_469762320 = nimCopy(null, nimCharToStr(f_469762318[0][0]), NTI33554439);
    f_469762318[0] = nimCopy(null, HEX5BHEX5D_671091881(f_469762318[0], HEX2EHEX2E_671091854(1, 1)), NTI33554439);
    }
    
    var toFill_469762342 = ((spec_469762315.minimumWidth - (f_469762318[0]).length) - (sign_469762319 ? 1 : 0));
    if ((0 < toFill_469762342)) {
    f_469762318[0] = nimCopy(null, (nsuRepeatChar(48, toFill_469762342) || []).concat(f_469762318[0] || []), NTI33554439);
    }
    
    if (sign_469762319) {
    f_469762318[0] = nimCopy(null, (signStr_469762320 || []).concat(f_469762318[0] || []), NTI33554439);
    }
    
    }
    
    if ((spec_469762315.align == 0)) {
    Temporary1 = 62;
    }
    else {
    Temporary1 = spec_469762315.align;
    }
    
    var align_469762343 = Temporary1;
    var res_469762344 = alignString_620757010(f_469762318[0], spec_469762315.minimumWidth, align_469762343, spec_469762315.fill);
    if ((ConstSet10[spec_469762315.typ] != undefined)) {
    result_469762309[result_469762309_Idx].push.apply(result_469762309[result_469762309_Idx], nsuToUpperAsciiStr(res_469762344));;
    }
    else {
    result_469762309[result_469762309_Idx].push.apply(result_469762309[result_469762309_Idx], res_469762344);;
    }
    
  } while (false);

  
}

function HEX2DHEX3D_469762303(x_469762305, x_469762305_Idx, y_469762306) {
    x_469762305[x_469762305_Idx] = (x_469762305[x_469762305_Idx] - y_469762306);

  
}

function round_469762299(x_469762301) {
  var result_469762302 = [0.0];

    if ((0.0 <= x_469762301)) {
    result_469762302[0] = Math.round(x_469762301);
    }
    else {
      result_469762302[0] = Math.ceil(x_469762301);
      if ((0.5 <= (result_469762302[0] - x_469762301))) {
      HEX2DHEX3D_469762303(result_469762302, 0, 1.0);
      }
      
    }
    

  return result_469762302[0];

}

function contains_469762388(s_469762392, value_469762393) {
  var result_469762394 = false;

    result_469762394 = ((s_469762392.a <= value_469762393) && (value_469762393 <= s_469762392.b));

  return result_469762394;

}

function HEX2EHEX2E_469762358(a_469762361, b_469762362) {
  var result_469762365 = ({a: 0.0, b: 0.0});

    result_469762365 = nimCopy(result_469762365, {a: a_469762361, b: b_469762362}, NTI469762255);

  return result_469762365;

}

function round_469762427(x_469762429, places_469762430) {
  var result_469762431 = 0.0;

    if ((places_469762430 == 0)) {
    result_469762431 = round_469762299(x_469762429);
    }
    else {
      var mult_469762435 = Math.pow(10.0, places_469762430);
      result_469762431 = (round_469762299((x_469762429 * mult_469762435)) / mult_469762435);
    }
    

  return result_469762431;

}

function adapt() {
    var Temporary1;
    var Temporary2;
    var Temporary3;

    var password_469762281 = cstrToNimstr(document.getElementById("password").value);
    var guesses_469762282 = document.getElementById("guesses");
    var charEntropy_469762283 = shannon(password_469762281);
    var strEntropy_469762284 = (charEntropy_469762283 * (password_469762281).length);
    if (!(eqStrings(password_469762281, []))) {
    var fmtRes_469762293 = [mnewString(0)];
    fmtRes_469762293[0].push.apply(fmtRes_469762293[0], makeNimstrLit("...can be found within "));;
    formatValue_469762307(fmtRes_469762293, 0, round_469762299(Math.pow(2.0, strEntropy_469762284)), []);
    fmtRes_469762293[0].push.apply(fmtRes_469762293[0], makeNimstrLit(" guesses"));;
    Temporary1 = toJSStr(fmtRes_469762293[0]);
    }
    else {
    Temporary1 = "...can be found within 0 guesses";
    }
    
    guesses_469762282.innerHTML = Temporary1;
    if ((55.0 <= strEntropy_469762284)) {
    Temporary2 = "green";
    }
    else {
    if (contains_469762388(HEX2EHEX2E_469762358(45.0, 50.9), strEntropy_469762284)) {
    Temporary2 = "yellowgreen";
    }
    else {
    if (contains_469762388(HEX2EHEX2E_469762358(20.0, 44.9), strEntropy_469762284)) {
    Temporary2 = "yellow";
    }
    else {
    if (contains_469762388(HEX2EHEX2E_469762358(0.1, 19.9), strEntropy_469762284)) {
    Temporary2 = "red";
    }
    else {
    Temporary2 = "white";
    }
    }}}
    guesses_469762282.style.color = Temporary2;
    var bitSpan_469762421 = document.getElementById("bits");
    if (!(eqStrings(password_469762281, []))) {
    var fmtRes_469762426 = [mnewString(0)];
    formatValue_469762307(fmtRes_469762426, 0, +(round_469762427(strEntropy_469762284, 2)), []);
    fmtRes_469762426[0].push.apply(fmtRes_469762426[0], makeNimstrLit(" bits of entropy; "));;
    formatValue_469762307(fmtRes_469762426, 0, +(round_469762427(charEntropy_469762283, 2)), []);
    fmtRes_469762426[0].push.apply(fmtRes_469762426[0], makeNimstrLit(" bits per character"));;
    Temporary3 = toJSStr(fmtRes_469762426[0]);
    }
    else {
    Temporary3 = "0 bits of entropy; 0 bits per character";
    }
    
    bitSpan_469762421.innerHTML = Temporary3;

  
}
