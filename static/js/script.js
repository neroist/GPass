/* Generated by the Nim Compiler v2.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554447 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI553648323 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI553648233 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554448 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI553648135 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
NTI553648135.base = NTI33554448;
NTI553648233.base = NTI33554445;
var NNI553648323 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554447, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554447, name: "b", sons: null}]};
NTI553648323.node = NNI553648323;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_p0, src_p1, ti_p2) {
  var result_33557326 = null;

    switch (ti_p2.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer__system_u2874(ti_p2))) {
      result_33557326 = src_p1;
      }
      else {
        result_33557326 = [src_p1[0], src_p1[1]];
      }
      
      break;
    case 19:
            if (dest_p0 === null || dest_p0 === undefined) {
        dest_p0 = {};
      }
      else {
        for (var key in dest_p0) { delete dest_p0[key]; }
      }
      for (var key in src_p1) { dest_p0[key] = src_p1[key]; }
      result_33557326 = dest_p0;
    
      break;
    case 18:
    case 17:
      if (!((ti_p2.base == null))) {
      result_33557326 = nimCopy(dest_p0, src_p1, ti_p2.base);
      }
      else {
      if ((ti_p2.kind == 17)) {
      result_33557326 = (dest_p0 === null || dest_p0 === undefined) ? {m_type: ti_p2} : dest_p0;
      }
      else {
        result_33557326 = (dest_p0 === null || dest_p0 === undefined) ? {} : dest_p0;
      }
      }
      nimCopyAux(result_33557326, src_p1, ti_p2.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_p1)) { 
        if(dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new src_p1.constructor(src_p1);
        } else {
          dest_p0.set(src_p1, 0);
        }
        result_33557326 = dest_p0;
      } else {
        if (src_p1 === null) {
          result_33557326 = null;
        }
        else {
          if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
            dest_p0 = new Array(src_p1.length);
          }
          result_33557326 = dest_p0;
          for (var i = 0; i < src_p1.length; ++i) {
            result_33557326[i] = nimCopy(result_33557326[i], src_p1[i], ti_p2.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_p1 === null) {
        result_33557326 = null;
      }
      else {
        if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new Array(src_p1.length);
        }
        result_33557326 = dest_p0;
        for (var i = 0; i < src_p1.length; ++i) {
          result_33557326[i] = nimCopy(result_33557326[i], src_p1[i], ti_p2.base);
        }
      }
    
      break;
    case 28:
            if (src_p1 !== null) {
        result_33557326 = src_p1.slice(0);
      }
    
      break;
    default: 
      result_33557326 = src_p1;
      break;
    }

  return result_33557326;

}

function cstrToNimstr(c_p0) {
      var ln = c_p0.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_p0.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_p0.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function eqStrings(a_p0, b_p1) {
        if (a_p0 == b_p1) return true;
    if (a_p0 === null && b_p1.length == 0) return true;
    if (b_p1 === null && a_p0.length == 0) return true;
    if ((!a_p0) || (!b_p1)) return false;
    var alen = a_p0.length;
    if (alen != b_p1.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_p0[i] != b_p1[i]) return false;
    return true;
  

  
}

function mnewString(len_p0) {
        var result = new Array(len_p0);
    for (var i = 0; i < len_p0; i++) {result[i] = 0;}
    return result;
  

  
}

function toJSStr(s_p0) {
  var result_33556919 = null;

    var res_33556973 = newSeq__system_u2516((s_p0).length);
    var i_33556974 = 0;
    var j_33556975 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556974 < (s_p0).length)) break Label2;
          var c_33556976 = s_p0[i_33556974];
          if ((c_33556976 < 128)) {
          res_33556973[j_33556975] = String.fromCharCode(c_33556976);
          i_33556974 += 1;
          }
          else {
            var helper_33557002 = newSeq__system_u2516(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33557003 = c_33556976.toString(16);
                  if ((((code_33557003) == null ? 0 : (code_33557003).length) == 1)) {
                  helper_33557002.push("%0");;
                  }
                  else {
                  helper_33557002.push("%");;
                  }
                  
                  helper_33557002.push(code_33557003);;
                  i_33556974 += 1;
                  if ((((s_p0).length <= i_33556974) || (s_p0[i_33556974] < 128))) {
                  break Label3;
                  }
                  
                  c_33556976 = s_p0[i_33556974];
                }
            };
++excHandler;
            try {
            res_33556973[j_33556975] = decodeURIComponent(helper_33557002.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556973[j_33556975] = helper_33557002.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556975 += 1;
        }
    };
    if (res_33556973.length < j_33556975) { for (var i = res_33556973.length ; i < j_33556975 ; ++i) res_33556973.push(null); }
               else { res_33556973.length = j_33556975; };
    result_33556919 = res_33556973.join("");

  return result_33556919;

}

function isFatPointer__system_u2874(ti_p0) {
  var result_33557308 = false;

  BeforeRet: {
    result_33557308 = !((ConstSet1[ti_p0.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557308;

}

function nimCopyAux(dest_p0, src_p1, n_p2) {
    switch (n_p2.kind) {
    case 0:
      break;
    case 1:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_p2.sons.length; i++) {
      nimCopyAux(dest_p0, src_p1, n_p2.sons[i]);
    }
    
      break;
    case 3:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
      for (var i = 0; i < n_p2.sons.length; ++i) {
        nimCopyAux(dest_p0, src_p1, n_p2.sons[i][1]);
      }
    
      break;
    }

  
}

function find__script_u48(a_p0, item_p1) {
  var result_553648181 = 0;

  BeforeRet: {
    result_553648181 = 0;
    Label1: {
      var i_553648185 = 0;
      var i_553648572 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_553648572 < (a_p0).length)) break Label3;
            i_553648185 = a_p0[i_553648572];
            if ((i_553648185 == item_p1)) {
            break BeforeRet;
            }
            
            result_553648181 += 1;
            i_553648572 += 1;
          }
      };
    };
    result_553648181 = (-1);
  };

  return result_553648181;

}

function contains__script_u43(a_p0, item_p1) {
  var result_553648175 = false;

  BeforeRet: {
    result_553648175 = (0 <= find__script_u48(a_p0, item_p1));
    break BeforeRet;
  };

  return result_553648175;

}

function deduplicate__script_u9(s_p0, isSorted_p1) {
  var result_553648142 = [];

    result_553648142 = nimCopy(null, [], NTI553648135);
    if ((0 < (s_p0).length)) {
    if (isSorted_p1) {
    var prev_553648150 = s_p0[0];
    result_553648142.push(prev_553648150);;
    Label1: {
      var i_553648162 = 0;
      var colontmp__553648564 = 0;
      colontmp__553648564 = (s_p0).length - 1;
      var res_553648565 = 1;
      Label2: {
          Label3: while (true) {
          if (!(res_553648565 <= colontmp__553648564)) break Label3;
            i_553648162 = res_553648565;
            if (!((s_p0[i_553648162] == prev_553648150))) {
            prev_553648150 = s_p0[i_553648162];
            result_553648142.push(prev_553648150);;
            }
            
            res_553648565 += 1;
          }
      };
    };
    }
    else {
      Label4: {
        var itm_553648170 = 0;
        var i_553648569 = 0;
        Label5: {
            Label6: while (true) {
            if (!(i_553648569 < (s_p0).length)) break Label6;
              itm_553648170 = s_p0[i_553648569];
              if (!(contains__script_u43(result_553648142, itm_553648170))) {
              result_553648142.push(itm_553648170);;
              }
              
              i_553648569 += 1;
            }
        };
      };
    }
    
    }
    

  return result_553648142;

}

function newSeq__script_u145(len_p0) {
  var result_553648277 = [];

    result_553648277 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_553648277[i] = 0.0; }
  return result_553648277;

}

function toFloat__system_u1573(i_p0) {
  var result_33556007 = 0.0;

    result_33556007 = i_p0;

  return result_33556007;

}

function HEX2F__system_u1585(x_p0, y_p1) {
  var result_33556020 = 0.0;

    result_33556020 = (toFloat__system_u1573(x_p0) / toFloat__system_u1573(y_p1));

  return result_33556020;

}

function count__script_u115(s_p0, x_p1) {
  var result_553648247 = 0;

    Label1: {
      var itm_553648251 = 0;
      var i_553648575 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_553648575 < (s_p0).length)) break Label3;
            itm_553648251 = s_p0[i_553648575];
            if ((itm_553648251 == x_p1)) {
            result_553648247 += 1;
            }
            
            i_553648575 += 1;
          }
      };
    };

  return result_553648247;

}

function HEX2BHEX3D__pureZstrutils_u2272(x_p0, x_p0_Idx, y_p1) {
    x_p0[x_p0_Idx] = (x_p0[x_p0_Idx] + y_p1);

  
}

function shannon(list_p0) {
  var result_553648136 = [0.0];

    var elems_553648211 = deduplicate__script_u9(list_p0, false);
    var collectResult_553648216 = newSeq__script_u145(0);
    Label1: {
      var elem_553648301 = 0;
      var i_553648555 = 0;
      var L_553648556 = (elems_553648211).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648555 < L_553648556)) break Label3;
            elem_553648301 = elems_553648211[i_553648555];
            collectResult_553648216.push(HEX2F__system_u1585(count__script_u115(list_p0, elem_553648301), (list_p0).length));;
            i_553648555 += 1;
          }
      };
    };
    var frequences_553648310 = nimCopy(null, collectResult_553648216, NTI553648233);
    Label4: {
      var frequency_553648331 = 0.0;
      var i_553648560 = 0;
      var L_553648561 = (frequences_553648310).length;
      Label5: {
          Label6: while (true) {
          if (!(i_553648560 < L_553648561)) break Label6;
            frequency_553648331 = frequences_553648310[i_553648560];
            HEX2BHEX3D__pureZstrutils_u2272(result_553648136, 0, (frequency_553648331 * Math.log2(frequency_553648331)));
            i_553648560 += 1;
          }
      };
    };
    result_553648136[0] = -(result_553648136[0]);

  return result_553648136[0];

}

function add__system_u1943(x_p0, x_p0_Idx, y_p1) {
          if (x_p0[x_p0_Idx] === null) { x_p0[x_p0_Idx] = []; }
      var off = x_p0[x_p0_Idx].length;
      x_p0[x_p0_Idx].length += y_p1.length;
      for (var i = 0; i < y_p1.length; ++i) {
        x_p0[x_p0_Idx][off+i] = y_p1.charCodeAt(i);
      }
    

  
}

function nimFloatToString__stdZformatfloat_u133(a_p0) {
  var result_385876103 = null;

          function nimOnlyDigitsOrMinus(n) {
        return n.toString().match(/^-?\d+$/);
      }
      if (Number.isSafeInteger(a_p0))
        result_385876103 = a_p0 === 0 && 1 / a_p0 < 0 ? "-0.0" : a_p0+".0";
      else {
        result_385876103 = a_p0+"";
        if(nimOnlyDigitsOrMinus(result_385876103)){
          result_385876103 = a_p0+".0";
        }
      }
    

  return result_385876103;

}

function addFloat__system_u3174(result_p0, result_p0_Idx, x_p1) {
    add__system_u1943(result_p0, result_p0_Idx, nimFloatToString__stdZformatfloat_u133(x_p1));

  
}

function HEX24__system_u3170(x_p0) {
  var result_33557605 = [[]];

    addFloat__system_u3174(result_33557605, 0, x_p0);

  return result_33557605[0];

}

function formatValue__script_u267(result_p0, result_p0_Idx, value_p1) {
    result_p0[result_p0_Idx].push.apply(result_p0[result_p0_Idx], HEX24__system_u3170(value_p1));;

  
}

function HEX2DHEX3D__script_u263(x_p0, x_p0_Idx, y_p1) {
    x_p0[x_p0_Idx] = (x_p0[x_p0_Idx] - y_p1);

  
}

function round__script_u259(x_p0) {
  var result_553648390 = [0.0];

    if ((0.0 <= x_p0)) {
    result_553648390[0] = Math.round(x_p0);
    }
    else {
      result_553648390[0] = Math.ceil(x_p0);
      if ((0.5 <= (result_553648390[0] - x_p0))) {
      HEX2DHEX3D__script_u263(result_553648390, 0, 1.0);
      }
      
    }
    

  return result_553648390[0];

}

function newSeq__system_u2516(len_p0) {
  var result_33556952 = [];

    result_33556952 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_33556952[i] = null; }
  return result_33556952;

}

function contains__script_u321(s_p0, value_p1) {
  var result_553648455 = false;

    result_553648455 = ((s_p0.a <= value_p1) && (value_p1 <= s_p0.b));

  return result_553648455;

}

function HEX2EHEX2E__script_u276(a_p0, b_p1) {
  var result_553648411 = ({a: 0.0, b: 0.0});

    result_553648411 = nimCopy(result_553648411, {a: a_p0, b: b_p1}, NTI553648323);

  return result_553648411;

}

function round__script_u360(x_p0, places_p1) {
  var result_553648492 = 0.0;

    if ((places_p1 == 0)) {
    result_553648492 = round__script_u259(x_p0);
    }
    else {
      var mult_553648496 = Math.pow(10.0, places_p1);
      result_553648492 = (round__script_u259((x_p0 * mult_553648496)) / mult_553648496);
    }
    

  return result_553648492;

}

function adapt() {
    var Temporary1;
    var Temporary3;
    var Temporary4;

    var password_553648369 = cstrToNimstr(document.getElementById("password").value);
    var guesses_553648370 = document.getElementById("guesses");
    var charEntropy_553648371 = shannon(password_553648369);
    var strEntropy_553648372 = (charEntropy_553648371 * (password_553648369).length);
    if (!(eqStrings(password_553648369, []))) {
    Label2: {
      var fmtRes_553648381 = [mnewString(0)];
      fmtRes_553648381[0].push.apply(fmtRes_553648381[0], [46,46,46,99,97,110,32,98,101,32,102,111,117,110,100,32,119,105,116,104,105,110,32]);;
      formatValue__script_u267(fmtRes_553648381, 0, round__script_u259(Math.pow(2.0, strEntropy_553648372)));
      fmtRes_553648381[0].push.apply(fmtRes_553648381[0], [32,103,117,101,115,115,101,115]);;
    };
    Temporary1 = toJSStr(fmtRes_553648381[0]);
    }
    else {
    Temporary1 = "...can be found within 0 guesses";
    }
    
    guesses_553648370.innerHTML = Temporary1;
    if ((55.0 <= strEntropy_553648372)) {
    Temporary3 = "green";
    }
    else {
    if (contains__script_u321(HEX2EHEX2E__script_u276(45.0, 54.9), strEntropy_553648372)) {
    Temporary3 = "yellowgreen";
    }
    else {
    if (contains__script_u321(HEX2EHEX2E__script_u276(20.0, 44.9), strEntropy_553648372)) {
    Temporary3 = "yellow";
    }
    else {
    if (contains__script_u321(HEX2EHEX2E__script_u276(0.1, 19.9), strEntropy_553648372)) {
    Temporary3 = "red";
    }
    else {
    Temporary3 = "white";
    }
    }}}
    guesses_553648370.style.color = Temporary3;
    var bitSpan_553648482 = document.getElementById("bits");
    if ((!(eqStrings(password_553648369, [])) && !((charEntropy_553648371 == 0.0)))) {
    Label5: {
      var fmtRes_553648487 = [mnewString(0)];
      formatValue__script_u267(fmtRes_553648487, 0, round__script_u360(strEntropy_553648372, 2));
      fmtRes_553648487[0].push.apply(fmtRes_553648487[0], [32,98,105,116,115,32,111,102,32,101,110,116,114,111,112,121,59,32]);;
      formatValue__script_u267(fmtRes_553648487, 0, round__script_u360(charEntropy_553648371, 2));
      fmtRes_553648487[0].push.apply(fmtRes_553648487[0], [32,98,105,116,115,32,112,101,114,32,99,104,97,114,97,99,116,101,114]);;
    };
    Temporary4 = toJSStr(fmtRes_553648487[0]);
    }
    else {
    Temporary4 = "0 bits of entropy; 0 bits per character";
    }
    
    bitSpan_553648482.innerHTML = Temporary4;

  
}

function toggle(__p0) {
    var Temporary1;

    var passwordToggle_553648550 = document.getElementById("password-toggle");
    var password_553648551 = document.getElementById("password");
    if ((password_553648551.getAttribute("type") == "text")) {
    Temporary1 = [112,97,115,115,119,111,114,100];
    }
    else {
    Temporary1 = [116,101,120,116];
    }
    
    var passwordType_553648552 = nimCopy(null, Temporary1, NTI33554449);
    password_553648551.setAttribute("type", toJSStr(passwordType_553648552));
    passwordToggle_553648550.classList.toggle("fa-eye-slash");

  
}
